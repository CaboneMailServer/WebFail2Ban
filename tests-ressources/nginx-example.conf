# Example Nginx configuration with fail2ban auth_request integration

# Main nginx configuration
user nginx;
worker_processes auto;
error_log /var/log/nginx/error.log notice;
pid /var/run/nginx.pid;

events {
    worker_connections 1024;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    # Logging format that includes auth status
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for" '
                    'auth_status="$upstream_http_x_fail2ban_status"';

    access_log /var/log/nginx/access.log main;

    sendfile on;
    tcp_nopush on;
    keepalive_timeout 65;
    gzip on;

    # Upstream for fail2ban auth service
    upstream fail2ban_auth {
        server fail2ban-service:8888;
        # Add backup servers if needed
        # server fail2ban-backup:8888 backup;
    }

    # Upstream for Dovecot IMAP
    upstream dovecot_imap {
        server dovecot-mail:143;
    }

    # Upstream for SOGo webmail
    upstream sogo_webmail {
        server sogo-mail:80;
    }

    # HTTP server for webmail (SOGo)
    server {
        listen 80;
        server_name webmail.example.com;

        # Internal auth location for fail2ban
        location = /auth {
            internal;
            proxy_pass http://fail2ban_auth/auth;
            proxy_pass_request_body off;
            proxy_set_header Content-Length "";
            proxy_set_header X-Original-URI $request_uri;
            proxy_set_header X-Original-IP $remote_addr;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header Host $http_host;
            proxy_connect_timeout 5s;
            proxy_send_timeout 5s;
            proxy_read_timeout 5s;
        }

        # Main location with auth protection
        location / {
            # Perform authentication check
            auth_request /auth;

            # Set variables from auth response
            auth_request_set $fail2ban_status $upstream_http_x_fail2ban_status;
            auth_request_set $fail2ban_ip $upstream_http_x_fail2ban_ip;
            auth_request_set $fail2ban_reason $upstream_http_x_fail2ban_reason;

            # Forward auth headers to backend
            proxy_set_header X-Fail2ban-Status $fail2ban_status;
            proxy_set_header X-Fail2ban-IP $fail2ban_ip;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header Host $host;

            # Proxy to SOGo
            proxy_pass http://sogo_webmail;
            proxy_redirect off;
            proxy_buffering off;
        }

        # Health check endpoint (bypasses auth)
        location /health {
            proxy_pass http://fail2ban_auth/health;
            access_log off;
        }

        # Custom error pages for banned IPs
        error_page 403 = @banned;
        location @banned {
            default_type application/json;
            return 403 '{"error":"access_denied","reason":"IP banned","ip":"$remote_addr","timestamp":"$time_iso8601"}';
        }

        # Handle auth service errors
        error_page 500 502 503 504 = @auth_error;
        location @auth_error {
            default_type application/json;
            return 500 '{"error":"auth_service_error","message":"Authentication service temporarily unavailable"}';
        }
    }

    # HTTPS server for webmail (with SSL termination)
    server {
        listen 443 ssl http2;
        server_name webmail.example.com;

        # SSL configuration
        ssl_certificate /etc/ssl/certs/webmail.crt;
        ssl_certificate_key /etc/ssl/private/webmail.key;
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384;
        ssl_prefer_server_ciphers off;

        # Same configuration as HTTP server
        location = /auth {
            internal;
            proxy_pass http://fail2ban_auth/auth;
            proxy_pass_request_body off;
            proxy_set_header Content-Length "";
            proxy_set_header X-Original-URI $request_uri;
            proxy_set_header X-Original-IP $remote_addr;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header Host $http_host;
        }

        location / {
            auth_request /auth;
            auth_request_set $fail2ban_status $upstream_http_x_fail2ban_status;
            auth_request_set $fail2ban_ip $upstream_http_x_fail2ban_ip;

            proxy_set_header X-Fail2ban-Status $fail2ban_status;
            proxy_set_header X-Fail2ban-IP $fail2ban_ip;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header Host $host;

            proxy_pass http://sogo_webmail;
        }

        error_page 403 = @banned;
        location @banned {
            default_type application/json;
            return 403 '{"error":"access_denied","reason":"IP banned","ip":"$remote_addr"}';
        }
    }
}

# Stream module for TCP proxying (IMAP, SMTP, etc.)
stream {
    # Logging for stream connections
    log_format stream_main '$remote_addr [$time_local] $protocol $bytes_sent $bytes_received $session_time';
    access_log /var/log/nginx/stream.log stream_main;

    # Map to determine backend based on server name (for SNI)
    map $ssl_preread_server_name $backend_pool {
        mail.example.com dovecot_imap;
        imap.example.com dovecot_imap;
        default dovecot_imap;
    }

    # Upstream for IMAP backend
    upstream dovecot_imap_stream {
        server dovecot-mail:143;
        # Add more IMAP servers for load balancing
        # server dovecot2:143;
    }

    # IMAP proxy server
    server {
        listen 143;
        proxy_pass dovecot_imap_stream;
        proxy_timeout 10s;
        proxy_responses 1;
        proxy_bind $remote_addr transparent;

        # Note: For TCP streams with auth_request, you would need:
        # 1. nginx-lua-module to make HTTP calls to auth service
        # 2. Custom Lua script to check IP before proxying
        # 3. Or implement connection-level filtering in fail2ban service

        # Example with lua (requires nginx-lua-module):
        # access_by_lua_block {
        #     local http = require "resty.http"
        #     local httpc = http.new()
        #     local res, err = httpc:request_uri("http://fail2ban-auth:8888/auth", {
        #         method = "GET",
        #         headers = {
        #             ["X-Real-IP"] = ngx.var.remote_addr,
        #         }
        #     })
        #     if res and res.status == 403 then
        #         ngx.log(ngx.ERR, "IP banned: " .. ngx.var.remote_addr)
        #         ngx.exit(403)
        #     end
        # }
    }

    # IMAPS proxy server
    server {
        listen 993 ssl;
        proxy_pass dovecot_imap_stream;
        proxy_timeout 10s;
        proxy_responses 1;

        # SSL passthrough or termination
        ssl_preread on;
        ssl_certificate /etc/ssl/certs/imap.crt;
        ssl_certificate_key /etc/ssl/private/imap.key;
    }
}